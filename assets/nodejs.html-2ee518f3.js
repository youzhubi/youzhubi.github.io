import{_ as n,p as s,q as a,Z as p}from"./framework-9675d465.js";const t={},e=p(`<h2 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js" aria-hidden="true">#</a> node.js</h2><ul><li>运行在服务器端的js</li><li>用来编写服务器</li></ul><p><strong>特点：</strong></p><ul><li>单线程、异步、非阻塞</li><li>统一API</li></ul><h2 id="nvm" tabindex="-1"><a class="header-anchor" href="#nvm" aria-hidden="true">#</a> nvm</h2><ul><li><p>命令</p><ul><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nvm list - 显示已安装的node版本
nvm <span class="token function">install</span> 版本 - 安装指定版本的node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>配置nvm的镜像服务器</p><ul><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nvm node_mirror https://npmmirror.com/mirrors/node/
 nvm use 版本 - 指定要使用的node版本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="node-js-和-javascript有什么区别" tabindex="-1"><a class="header-anchor" href="#node-js-和-javascript有什么区别" aria-hidden="true">#</a> node.js 和 JavaScript有什么区别？</h2><ul><li>node和JS的标准是一样的，遵循的都是ECMAScript</li><li>DOM BOM 是浏览器独有的，node没有DOM BOM</li></ul><h2 id="什么是node-js" tabindex="-1"><a class="header-anchor" href="#什么是node-js" aria-hidden="true">#</a> 什么是Node.js?</h2><ul><li><p>在 Node.js 之前，JavaScript 只能运行在浏览器中，作为网页脚本使用，为网页添加一些特效，或者和服务器进行通信</p></li><li><p>有了 Node.js 以后，JavaScript 就可以脱离浏览器，像其它编程语言一样直接在计算机上使用，想干什么就干什么，再也不受浏览器的限制了.</p></li><li><p>Node.js 不是一门新的编程语言，也不是一个 JavaScript 框架，它是一套 JavaScript 运行环境，用来支持 JavaScript 代码的执行. 用编程术语来讲，Node.js 是一个 JavaScript 运行时（<code>Runtime</code>）</p></li><li><p><strong>什么是运行时？</strong></p><ul><li><p>所谓运行时，就是程序在运行期间需要依赖的一系列组件或者工具；把这些工具和组件打包在一起提供给程序员，程序员就能运行自己编写的代码了</p></li><li><p>对于 JavaScript 来说，它在运行期间需要依赖以下组件：</p><ul><li><p>解释器：JavaScript 是一种脚本语言，需要一边解释一边运行，用到哪些源代码就编译哪些源代码，整个过程由解释器完成。没有解释器的话，JavaScript 只是一堆纯文本文件，不能被计算机识别</p><p>V8 引擎就是 JavaScript 解释器，它负责解析和执行 JavaScript 代码</p></li><li><p>标准库：在 JavaScript 代码中会调用一些内置函数，这些函数不是我们自己编写的，而是标准库自带的</p></li><li><p>本地模块：就是已经被提前编译好的模块，它们是二进制文件，和可执行文件在内部结构上没有什么区别，只是不能单独运行而已。JavaScript 的很多功能都需要本地模块的支持，比如：cookie、ajax 等. JavaScript 解释器需要本地模块的支持，标准库在编写时也会调用本地模块的接口，而我们编写的 JavaScript 代码一般不会直接使用本地模块，所以 Web 前端程序员触及不到它们。</p><p>本地模块是幕后英雄，它不显山露水，但是又不可或缺。</p></li></ul></li><li><p>解释器、标准库、本地模块等各种组件/工具共同支撑了 JavaScript 代码的运行，它们统称为 JavaScript 运行时。</p></li></ul></li><li><p><strong>Node.js的诞生</strong></p><ul><li><p>谷歌公司在 Chrome 浏览器中集成了一种名为“V8”的 JavaScript 引擎（也即 JavaScript 解释器），它能够非常快速地解析和执行 JavaScript 代码</p></li><li><p>V8 引擎的强大，以及当年 JavaScript 的火爆，使得一名叫 Ryan Dahl 的程序员动起了“歪心思”，他希望在浏览器之外再为 JavaScript 构建一个运行时，让 JavaScript 能够直接在计算机上运行，这样 JavaScript 就能像 Python、Ruby、PHP 等其它脚本语言一样大展宏图，不必再受限于浏览器，只能做一些小事情。</p><p>Ryan Dahl 和他的团队真的做到了，并且做得很好，他们将这套独立的 JavaScript 运行时命名为 Node.js</p></li></ul></li><li><p>Node.js 几乎完全抛弃了浏览器，自己从头构建了一套全新的 JavaScript 运行时. 它让 JavaScript 脱离了浏览器环境，可以直接在计算机上运行，极大地拓展了 JavaScript 用途。我们应该将 JavaScript 和 Python、Java、Ruby 等其它编程语言同等对待.</p></li></ul><p>简单的说 Node.js 就是运行在服务端的 JavaScript. Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台.</p><p>Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好.</p><h2 id="进程和线程" tabindex="-1"><a class="header-anchor" href="#进程和线程" aria-hidden="true">#</a> 进程和线程</h2><ul><li><p>进程就是一个内存空间，是程序运行的环境，程序运行需要进程</p></li><li><p>线程是实际进行运算的东西，也就是程序要真正运行起来需要线程</p></li><li><p>线程会进入到进程里运行</p><p><strong>进程(厂房)</strong></p></li><li><p>程序的运行的环境</p><p><strong>线程(工人)</strong></p></li><li><p>线程是实际进行运算的东西</p></li></ul><h2 id="同步" tabindex="-1"><a class="header-anchor" href="#同步" aria-hidden="true">#</a> <strong>同步</strong></h2><ul><li>通常情况代码都是自上向下一行一行执行的</li><li>前边的代码的不执行后边的代码也不执行</li><li>同步的代码执行会出现阻塞的情况</li><li>一行代码执行慢会影响整个程序的执行</li></ul><p>​</p><h2 id="解决同步问题" tabindex="-1"><a class="header-anchor" href="#解决同步问题" aria-hidden="true">#</a> <strong>解决同步问题:</strong></h2><p>java python</p><ul><li>通过多线程解决问题，对计算机和编程的要求较高</li></ul><p><strong>node.js</strong></p><ul><li><strong>通过异步方式解决， 执行速度慢的代码不影响整个程序.</strong></li></ul><h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h2><ul><li><p>什么是异步？可理解为一段代码的执行不会影响到其他的程序</p></li><li><p>如果在函数返回的时候, 调用者还不能够得到预期结果, 而是需要在将来通过一定的手段得到, 那么这个函数就是异步的.</p><p>比如说发一个网络请求, 我们告诉主程序等到接收到数据后再通知我, 然后我们就可以去做其他的事情了. <strong>当异步完成后, 会通知到我们</strong>, 但是此时可能程序正在做其他的事情, 所以即使异步完成了也需要在一旁等待, 等到程序空闲下来才有时间去看哪些异步已经完成了, 再去执行. 这也就是定时器并不能精确在指定时间后输出回调函数结果的原因.</p></li><li><p>异步的问题：异步代码的执行结果无法通过return获得</p></li><li><p>异步的特点：</p><ul><li>不会阻塞其他代码的执行</li><li><strong>需要通过回调函数来返回代码执行的结果</strong></li></ul></li><li><p>基于回调函数的异步带来的问题：</p><ul><li>代码的可读性差</li><li>代码的可调试性差</li><li>产生回调地狱的问题</li></ul></li><li><p>解决回调地狱的问题</p><ul><li><p>需要一个可以代替回调函数来给我们返回结果的东西</p></li><li><p>这个东西就是promise</p><ul><li>promise是一个可以用来存储数据的对象，它存储数据的方式比较特殊，取数据的方式也比较特殊</li><li>这种特殊方式使得promise可以用来存储异步调用的数据</li><li>promise就是可以存储异步代码的对象</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// cb(callback),第3个参数是回调函数</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">// 异步</span>
    <span class="token function">cb</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token comment">// a+b的结果作为回调函数的参数进行传递</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1111111&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 同步</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">cb</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;111111&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// 回调地狱</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">sum</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token function">sum</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">sum</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">sum</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>现实生活</strong></p><p>​ 1.点菜</p><p>​ 2.厨师做菜</p><p>​ 3.吃</p><h2 id="回调函数的作用" tabindex="-1"><a class="header-anchor" href="#回调函数的作用" aria-hidden="true">#</a> 回调函数的作用</h2><ul><li><p>回调函数是JS中非常重要的特点. JS 中使用了大量的异步代码</p></li><li><p>当某个函数被作为参数, 传递给另外一个函数, 或者传递给宿主环境, 然后该函数在函数内部或者在宿主环境中被调用, 我们称之为回调函数.</p><p>回调函数有同步和异步两种, 同步回调和异步回调的最大区别在于<strong>同步回调函数是在执行函数内部被执行的, 而异步回调函数是在执行函数外部被执行的</strong>.</p><p>比如 forEach 里的回调函数, 是在 forEach 函数内部执行, 所以是个同步回调.</p><p>再比如 setTimeout 里的回调函数, V8 执行 setTimeout 时, 会立即返回, 等待 x 毫秒之后, 该回调函数才会被 V8 调用, 该回调函数并不是在 setTimeout 函数内部被执行的, 所以这是一个异步回调.</p></li><li><p>因为<strong>异步代码没有办法直接return结果，它是通过回调函数获得代码执行后的返回结果</strong>.</p></li><li><p>也就是说，异步调用必须通过回调函数来返回结果，但是当我们进行一些复杂的调用时，会出现“回调地狱”，回调函数一多就很痛苦.</p></li><li><p>因此要使用promise来解决异步中回调函数的回调地狱的问题</p></li><li><p>promise有其一套特殊的存取数据的方式，这个方式使得promise里面可以存储异步调用的结果</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 回调函数</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">cb</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// 579</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),i=[e];function l(o,c){return s(),a("div",null,i)}const r=n(t,[["render",l],["__file","nodejs.html.vue"]]);export{r as default};
