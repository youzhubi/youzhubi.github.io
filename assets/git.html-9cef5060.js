import{_ as i,p as o,q as l,s as a,R as s,t as e,Z as t,n as p}from"./framework-9675d465.js";const c={},r=t(`<blockquote><p>项目的开发是一个不断迭代的过程，开发过程中程序员需要不断的对代码进行编写和更正。这就带来很多的问题。首先，开发中代码会存在多个版本，我们如何将代码在多个版本间进行切换？第二，代码上线后，如何在不影响现行开发工作的情况下对代码进行维护？第三，开发时某段代码被多人修改时，如何处理代码的冲突问题？除此之外，还有存储效率、远程仓库等问题。</p><p>git是一个免费开源的版本控制系统，它被设计用来快速高效地管理项目开发的源码。通过git可以跟踪代码的状态，也可以在修改代码后对代码状态进行存储，还可以在需要时将已经修改过的代码恢复到之前存储的状态。更强大的是使用git管理代码时，可以创建代码分支（branch），代码分支相当于一段独立的代码记录，我们可以在分支上对代码进行任意的修改，而这个修改只会影响当前分支，不会对其他分支产生影响。同时，可以对分支进行合并，合并后一个分支的修改便可在另一分支上生效。总之，git是当今最优秀的版本控制工具！</p></blockquote><h2 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装" aria-hidden="true">#</a> 1.安装</h2><p>打开命令行，输入<code>git -v</code>，能看到正常输出即表示安装成功。</p><h2 id="_2-配置" tabindex="-1"><a class="header-anchor" href="#_2-配置" aria-hidden="true">#</a> 2.配置</h2><p>使用git前，我们需要配置一下两个属性name和email，这两个信息会用来在存储代码时记录用户的身份。可以直接在命令行中通过指令来设置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;xxx&quot;</span>

<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;xxx&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化项目：</p><p>默认情况下，磁盘中的文件并不由git管理，我们必须要对代码目录进行初始化，初始化后git才能正常的管理文件。进入目录后，直接在目录中执行<code>git init</code>即可完成项目的初始化，初始化后目录中会多出一个.git目录，这个目录用来存储代码的版本信息，有了.git就意味着项目现在已经开始被.git管理了，不希望项目被git管理时，只需删除项目中的.git即可。</p><h2 id="_3-文件状态" tabindex="-1"><a class="header-anchor" href="#_3-文件状态" aria-hidden="true">#</a> 3.文件状态</h2><p>git中的文件有两种状态：<strong>未跟踪</strong>和<strong>已跟踪</strong>。未跟踪指文件没有被git所管理，已跟踪指文件已被git管理。已跟踪的文件又有三种状态：未修改、修改和暂存。</p><p><strong>暂存</strong>，表示文件修改已经保存，但是尚未提交到git仓库。</p><p><strong>未修改</strong>，表示磁盘中的文件和git仓库中文件相同，没有修改。</p><p><strong>已修改</strong>，表示磁盘中文件已被修改，和git仓库中文件不同。</p><p>可以通过<code>git status</code>来查看文件的状态</p><h2 id="_4-使用git" tabindex="-1"><a class="header-anchor" href="#_4-使用git" aria-hidden="true">#</a> 4.使用git</h2><p>git status : 查看当前仓库的状态</p><p>git init：初始化仓库</p><p>刚刚添加到项目中的文件处于未跟踪的状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>	 未跟踪 ---<span class="token operator">&gt;</span> 暂存  <span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span> 将文件切换到暂存的状态 
	 暂存 ---<span class="token operator">&gt;</span> 未修改   <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;xxxxxxxx&quot;</span> 将暂存的文件存储到仓库中
	 未修改 ---<span class="token operator">&gt;</span> 已修改   修改代码以后，文件会变为修改状态
 	 <span class="token function">git</span> <span class="token function">add</span> * 将所有已修改（未跟踪）的文件暂存   
	<span class="token function">git</span> commit <span class="token parameter variable">-a</span> <span class="token parameter variable">-m</span> <span class="token string">&quot;xxxx&quot;</span> 提交所有已修改的文件（未跟踪的文件不会提交）

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-常用的命令" tabindex="-1"><a class="header-anchor" href="#_5-常用的命令" aria-hidden="true">#</a> 5.常用的命令</h2><ol><li>重置文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> restore <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span>  <span class="token comment"># 恢复文件</span>
<span class="token function">git</span> restore *
<span class="token function">git</span> restore <span class="token parameter variable">--staged</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span> <span class="token comment"># 取消暂存状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.删除文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span> <span class="token comment"># 删除文件</span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span> <span class="token parameter variable">-f</span> <span class="token comment"># 强制删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>移动文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">mv</span> from to <span class="token comment"># 移动文件 重命名文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-分支" tabindex="-1"><a class="header-anchor" href="#_6-分支" aria-hidden="true">#</a> 6.分支</h2><p><code>git</code>在存储文件时，每一次代码代码的提交都会创建一个与之对应的节点，<code>git</code>就是通过一个一个的节 点来记录代码的状态的。节点会构成一个树状结构，树状结构就意味着这个树会存在分支，默认情 况下仓库只有一个分支，命名为<strong>master</strong>。在使用<code>git</code>时，可以创建多个分支，分支与分支之间相互 独立，在一个分支上修改代码不会影响其他的分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token comment"># 查看当前分支</span>
<span class="token function">git</span> branch <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment"># 创建新的分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment"># 删除分支</span>
<span class="token function">git</span> switch <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment"># 切换分支</span>
<span class="token function">git</span> switch <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment"># 创建并切换分支</span>
<span class="token function">git</span> merge <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment"># 和并分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在开发中，都是在自己的分支上编写代码，代码编写完成后，在将自己的分支合并到主分支中</p><h2 id="_7-变基-rebase" tabindex="-1"><a class="header-anchor" href="#_7-变基-rebase" aria-hidden="true">#</a> 7.变基（rebase）</h2><p>在开发中除了通过<code>merge</code>来合并分支外，还可以通过变基来完成分支的合并</p><p>我们通过merge合并分支时，在提交中记录中会将所有的分支创建和分支合并的过程全部显示出来，这样当项目比较波折时，我们必须要反复的创建，合并、删除分支、这样一来将会使得我们代码的提交记录变得极为混乱。</p><p>原理（变基时发生了什么）：</p><ol><li>当我们发起变基时，git会首先找到两条分支的最近的共同祖先。</li><li>对比当前分支相对于祖先的历史提交，并且将它们提取出来存储到一个临时文件中。</li><li>将当前部分指向目标的基底。</li><li>以当前基底开始，重新执行历史操作。</li></ol><p>变基和merge对于合并分支来说最终的结果是一样的！但是变基会使得代码的提交记录更整洁更清晰！</p><p>**注意：**大部分情况下合并和变基是可以互换的，但是如果分支已经提交给了我们的远程仓库，那么这时尽量不要使用变基。</p><h2 id="_8-远程仓库-remote" tabindex="-1"><a class="header-anchor" href="#_8-远程仓库-remote" aria-hidden="true">#</a> 8.远程仓库（remote）</h2><p>目前我对于git所有操作都是在本地进行的。在开发中显然不能这样的，这时我们就需要一个远程的git仓库。远程的git仓库和本地的本质没有什么区别，不同点在于远程的仓库可以被多人同时访问使用，方便我们协同开发。在实际工作中，git的服务器通常由公司搭建内部使用或是购买一些公共的私有git服务器。我们学习阶段，直接使用一些开放的公共git仓库。目前我们常用的库有两个：GitHub和Gitee（码云）</p><p>将本地库上传到git：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/youzhubi/gitdemo.git
<span class="token comment"># git  remote add &lt;remote name&gt; &lt;url&gt; </span>

<span class="token function">git</span> branch <span class="token parameter variable">-M</span> main
<span class="token comment"># 修改分支的名字的为main </span>
<span class="token comment">#默认为master </span>

<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main
<span class="token comment"># git push 将代码上传到服务器上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将本地库上传gitee：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> gitee https://gitee.com/fyjwww/git-demo.git
<span class="token function">git</span> push <span class="token parameter variable">-u</span> gitee master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-远程库的操作的命令" tabindex="-1"><a class="header-anchor" href="#_9-远程库的操作的命令" aria-hidden="true">#</a> 9.远程库的操作的命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token comment"># 列出当前的关联的远程库</span>
<span class="token function">git</span> remote <span class="token function">add</span> <span class="token operator">&lt;</span>远程库名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token comment"># 关联远程仓库</span>
<span class="token function">git</span> remote remove <span class="token operator">&lt;</span>远程库名<span class="token operator">&gt;</span>  <span class="token comment"># 删除远程库</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> <span class="token operator">&lt;</span>远程库名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span> <span class="token comment"># -u 向远程库推送代码，并和当前分支关联</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>远程库<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地分支<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>远程分支<span class="token operator">&gt;</span> <span class="token comment">#把本地分支，推送到远程分支</span>
<span class="token function">git</span> clone <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token comment"># 从远程库下载代码</span>
<span class="token function">git</span> clone <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>newName<span class="token operator">&gt;</span> <span class="token comment"># 从远程库下载代码 并修改名字</span>

<span class="token function">git</span> push <span class="token comment"># 如果本地的版本低于远程库，push默认是推不上去</span>
<span class="token function">git</span> fetch <span class="token comment"># 要想推送成功，必须先确保本地库和远程库的版本一致，fetch它会从远程仓库下载所有代码，但是它不会将代码和当前分支自动合并</span>
	      <span class="token comment"># 使用fetch拉取代码后，必须要手动对代码进行合并	</span>
<span class="token function">git</span> pull  <span class="token comment"># 从服务器上拉取代码并自动合并 </span>

<span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span> <span class="token comment">#删除远程仓库分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-r</span> <span class="token comment">#查看远程分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：推送代码之前，一定要先从远程库中拉取最新的代码</p><h2 id="_10-tag标签" tabindex="-1"><a class="header-anchor" href="#_10-tag标签" aria-hidden="true">#</a> 10.tag标签</h2><ul><li>当头指针没有执行某个分支的头部时，这种状态我们称为分离头指针（HEAD detached），分离头指针的状态下也可以操作操作代码，但是这些操作不会出现在任何的分支上，所以注意不要再分离头指针的状态下来操作仓库。</li><li>如果非得要回到后边的节点对代码进行操作，则可以选择创建分支后再操作</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch <span class="token operator">&lt;</span>节点id<span class="token operator">&gt;</span> <span class="token parameter variable">--detach</span> <span class="token comment">#通过节点id切换</span>
<span class="token function">git</span> switch <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>节点id<span class="token operator">&gt;</span> <span class="token comment">#创建一个新的分支并指向提交的id的对应节点</span>
<span class="token function">git</span> switch <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>标签名<span class="token operator">&gt;</span> <span class="token comment">#创建一个新的分支并指向标签名所在节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以为提交记录设置标签，设置标签以后，可以通过标签快速的识别出不同的开发节点：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag
<span class="token function">git</span> tag 版本 <span class="token comment">#设置当前版本标签</span>
<span class="token function">git</span> tag 版本 提交id <span class="token comment"># 指定版本标记标签</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>远程仓库<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>标签名<span class="token operator">&gt;</span> <span class="token comment">#上传指定标签</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>远程仓库<span class="token operator">&gt;</span> <span class="token parameter variable">--tags</span> <span class="token comment">#上传全部标签</span>
<span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>标签名<span class="token operator">&gt;</span> <span class="token comment"># 删除本地标签</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>远程仓库<span class="token operator">&gt;</span> <span class="token parameter variable">--delete</span> 标签名 <span class="token comment"># 删除远程标签</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-gitignore" tabindex="-1"><a class="header-anchor" href="#_11-gitignore" aria-hidden="true">#</a> 11.gitignore</h2><ul><li>默认情况下，git会监视项目中所有内容，但是有些内容比如node_modules目录中的内容，我们不希望它被git所管理。我们可以在项目目录中添加一个<code>.gitignore</code>文件，来设置那些需要git忽略的文件。</li></ul><p>.gitignore文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>#注释
文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-github的静态页面" tabindex="-1"><a class="header-anchor" href="#_12-github的静态页面" aria-hidden="true">#</a> 12.github的静态页面</h2><ul><li>在github中，可以将自己的静态页面直接部署到github中，它会给我们提供一个地址使得我们的页面变成一个真正的网站，可以供用户访问。</li><li>要求： <ul><li>静态页面的分支必须叫做：<code>gh-pages</code></li><li>如果希望页面可以通过xxx.github.io访问，则需要将库的名字配置为<strong>xxx.github.io</strong></li></ul></li></ul><h2 id="_13-docusaurus" tabindex="-1"><a class="header-anchor" href="#_13-docusaurus" aria-hidden="true">#</a> 13.docusaurus</h2>`,58),d=a("li",null,"facebook推出的开源的静态的内容管理系统，通过它可以快速的部署一个静态网站",-1),u={href:"https://gitee.com/link?target=https%3A%2F%2Fdocusaurus.io%2F",target:"_blank",rel:"noopener noreferrer"},m=t("<li>安装 <ul><li><code>npx create-docusaurus@latest my-website classic</code></li></ul></li><li>启动项目 <ul><li><code>npm start</code>或<code>yarn start</code></li></ul></li><li>构建项目 <ul><li><code>npm run build</code>或<code>yarn build</code></li></ul></li><li>配置项目： <ul><li>docusaurus.config.js 项目的配置文件</li></ul></li><li>添加页面： <ul><li>在docusaurus框架中，页面分成三种：1.page，2.blog，3.doc</li></ul></li>",5),g={href:"https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Flilichao%2Flilichao.github.io",target:"_blank",rel:"noopener noreferrer"};function v(k,h){const n=p("ExternalLinkIcon");return o(),l("div",null,[r,a("ul",null,[d,a("li",null,[s("使用： "),a("ul",null,[a("li",null,[s("网址： "),a("ul",null,[a("li",null,[a("a",u,[s("https://docusaurus.io/"),e(n)])])])]),m,a("li",null,[s("案例地址： "),a("ul",null,[a("li",null,[a("a",g,[s("https://github.com/lilichao/lilichao.github.io"),e(n)])])])])])])])])}const f=i(c,[["render",v],["__file","git.html.vue"]]);export{f as default};
