import{_ as n,p as s,q as a,Z as e}from"./framework-9675d465.js";const p="/nodejsImages/1.png",o={},t=e(`<p>早期的网页中，是没有一个实质的模块规范的，我们实现模块化的方式，就是最原始的通过script标签来引入多个js文件</p><p>问题：</p><ol><li>无法选择要引入模块的哪些内容</li><li>在复杂的模块场景下非常容易出错</li></ol><p>​ 等等问题。。。。。。</p><p>于是，我们就急需在js中引入一个模块化的解决方案。</p><p><strong>什么是模块化与模块 ？</strong></p><p>将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为 <code>模块化。</code></p><p>其中拆分出的 <code>每个文件就是一个模块</code> ，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他 模块使用。</p><p><strong>什么是模块化项目 ?</strong></p><p>编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目。</p><p><strong>模块化好处：</strong></p><ol><li>防止命名冲突</li><li>高复用性</li><li>高维护性</li></ol><p>在node中，默认支持的模块化规范叫做CommonJS，在CommonJS中，一个js文件就是一个模块。</p><h2 id="commonjs规范" tabindex="-1"><a class="header-anchor" href="#commonjs规范" aria-hidden="true">#</a> <strong>CommonJS规范</strong></h2><h3 id="_1-暴露数据" tabindex="-1"><a class="header-anchor" href="#_1-暴露数据" aria-hidden="true">#</a> 1.暴露数据</h3><p>在定义模块时，模块中的内容默认是不能被外部看到的，可以通过exports来设置要向外部暴露的内容</p><p>访问expors的方式有两种：</p><ul><li>exports.name = value</li><li>module.exports = value</li></ul><blockquote><p>当我们在其他模块中引入当前模块时，require函数返回的就是exports。 可以将希望暴露给外部模块的内容设置为exports的属性。</p><p>注意事项：</p><ul><li>module.exports 可以暴露 任意 数据</li><li>不能使用 exports = value 的形式暴露数据，模块内部 module 与 exports 的隐式关系，exports === module.exports 初始化值时都是指向同一个空对象{} ，require 返回的是目标模块中 module.exports 的值</li></ul></blockquote><p>m1.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// let a = 10</span>
<span class="token comment">// console.log(a)</span>

<span class="token comment">// 可以通过exports一个个的导出值</span>
<span class="token comment">// exports.a = &quot;孙悟空&quot;</span>
<span class="token comment">// exports.b = { name: &#39;白骨精&#39; }</span>
<span class="token comment">// exports.c = function fn() {</span>
<span class="token comment">//     console.log(&quot;哈哈&quot;)</span>
<span class="token comment">// }</span>

<span class="token comment">// 也可以直接通过module.exports同时导出多个值 </span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;哈哈&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function-variable function">c</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这里只是重新给变量赋值 </span>
<span class="token comment">// exports = {</span>
<span class="token comment">//     a: &#39;哈哈&#39;,</span>
<span class="token comment">//     b: [1, 3, 5, 7],</span>
<span class="token comment">//     c: () =&gt; {</span>
<span class="token comment">//         console.log(111)</span>
<span class="token comment">//     }</span>
<span class="token comment">// }</span>
<span class="token comment">//exports.d = &quot;孙悟空&quot;</span>
<span class="token comment">// exports.d = 18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-引入模块" tabindex="-1"><a class="header-anchor" href="#_2-引入模块" aria-hidden="true">#</a> 2.引入模块</h3><p>使用require(&quot;模块路径&quot;)函数来引入模块的注意事项 ：</p><ol><li>引入自定义模块时，导入时路径建议写 相对路径 ，模块名要以<code>./</code>或<code>../</code>开头。</li><li>js 和 json 文件导入时可以不用写后缀，c/c++编写的 node 扩展文件也可以不写后缀，但是一 般用不到。</li><li>如果导入其他类型的文件，会以 <code>js</code> 文件进行处理。</li><li>导入 node.js 内置模块时，直接 require 模块的名字即可，无需加 ./ 和 ../</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./m1.js&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//console.log(m1)//{}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>扩展名可以省略 <ul><li>在CommonJS中，如果省略的js文件的扩展名则node，会自动为我们的文件补全扩展名 ./m1.js如果没有 它会寻找 ./m1.json先找js再json然后node(特殊) js ---&gt;json ---&gt; node(特殊)</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./m1&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>引入核心模块 <ul><li>直接写核心模块名字即可</li><li>也可以在核心模块前添加 node:</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 查找核心模块</span>
<span class="token comment">// const path = require(&quot;path&quot;)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;node:path&quot;</span><span class="token punctuation">)</span><span class="token comment">//加上node: 查找速度更快 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>默认情况下，Node.js会将以下内容视为CommonJS模块：</strong></p><ol><li>使用.cjs为扩展名的文件</li><li>当前的package.json的type属性为commonjs时，扩展名为.js的文件</li><li>当前的package.json不包含type属性时，扩展名为.js的文件</li><li>文件的扩展名是mjs、cjs、json、node、js以外的值时（type不是module时）</li></ol><h2 id="文件夹作为模块" tabindex="-1"><a class="header-anchor" href="#文件夹作为模块" aria-hidden="true">#</a> 文件夹作为模块</h2><p>当我们使用一个文件夹作为模块时，文件夹中必须有一个模块的主文件。如果文件夹中含有<code>package.json</code>文件且文件中设置<code>main</code>属性，则<code>main</code>属性指定的文件会成为主文件，导入模块时就是导入该文件。</p><p>如果没有<code>package.json</code>，<strong>则node会按照<code>index.js</code>、<code>index.json</code>的顺序寻找主文件。</strong> 如果还是没找到，就会报错。</p><p>主文件👇（index.js） 假设一个文件夹（hello）包含四个文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//引入其他三个模块</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./a&quot;</span><span class="token punctuation">)</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./b&quot;</span><span class="token punctuation">)</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./c&quot;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;index.js&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./hello&quot;</span><span class="token punctuation">)</span> <span class="token comment">// index.js</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="commonjs原理" tabindex="-1"><a class="header-anchor" href="#commonjs原理" aria-hidden="true">#</a> CommonJS原理</h2><p>每一个CommonJS模块在执行时，外层都会被套上一个函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//可以通过 console.log(arguments.callee) 来查看这个函数</span>
<span class="token comment">//(function(exports, require, module, __filename, __dirname) {</span>
  <span class="token comment">// 模块代码会被放到这里</span>
 <span class="token comment">// })</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们之所以能在CommonJS模块中使用<code>exports</code>、<code>require</code>并不是因为它们是全局变量。它们实际上以参数的形式传递进模块的。</p><ul><li>exports：用来设置模块向外部暴露的内容</li><li>require：用来引入模块的方法</li><li>module：当前模块的引用</li><li>__filename：模块的路径</li><li>__dirname：模块所在目录的路径</li></ul><h2 id="导入模块的基本流程图" tabindex="-1"><a class="header-anchor" href="#导入模块的基本流程图" aria-hidden="true">#</a> 导入模块的基本流程图</h2><p><img src="`+p+`" alt=""></p><h2 id="es模块" tabindex="-1"><a class="header-anchor" href="#es模块" aria-hidden="true">#</a> ES模块</h2><ul><li>ESM 自动采用严格模式，忽略 &#39;use strict&#39;</li><li>每个 ES Module 都是运行在单独的<strong>私有作用域中</strong></li><li>ESM 是通过 <strong>CORS</strong> 的方式请求外部 JS 模块的</li><li>ESM 的 script 标签会延迟执行脚本(浏览器页面渲染后执行)</li></ul><p>默认情况下，node中的模块化标准是CommonJS，要想使用ES的模块化，可以采用以下两种方案：</p><ol><li><p>使用mjs作为扩展名</p></li><li><p>修改package.json将模块化规范设置为ES模块，当我们设置&quot;type&quot;: &quot;module&quot;当前项目下所有的js文件都默认为ES module</p></li></ol><p><strong>导出</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出变量（命名导出）</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN<span class="token punctuation">;</span> 
<span class="token keyword">export</span> <span class="token keyword">let</span> name1 <span class="token operator">=</span> …<span class="token punctuation">,</span> name2 <span class="token operator">=</span> …<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN<span class="token punctuation">;</span> 

<span class="token comment">// 导出函数（命名导出）</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token comment">// 导出类（命名导出）</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token comment">// 导出一组</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 重命名导出</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> variable1 <span class="token keyword">as</span> name1<span class="token punctuation">,</span> variable2 <span class="token keyword">as</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 解构赋值后导出</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> name1<span class="token punctuation">,</span> <span class="token literal-property property">name2</span><span class="token operator">:</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>

<span class="token comment">// 默认导出</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> expression<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">…</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span> <span class="token comment">// also class, function*</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">name1</span><span class="token punctuation">(</span><span class="token parameter">…</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span> <span class="token comment">// also class, function*</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> name1 <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">,</span> … <span class="token punctuation">}</span><span class="token punctuation">;</span>
                               
<span class="token comment">//设置默认导出,一个模块中只有一个默认导出</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>                               
<span class="token comment">//default后面只能跟值</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">let</span> d
<span class="token keyword">export</span> <span class="token keyword">default</span> d <span class="token operator">=</span> <span class="token number">20</span>                         

<span class="token comment">// 聚合模块</span>
<span class="token keyword">export</span> <span class="token operator">*</span> from …<span class="token punctuation">;</span> <span class="token comment">// 将其他模块中的全部内容导出（除了default）</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">as</span> name1 from …<span class="token punctuation">;</span> <span class="token comment">// ECMAScript® 2O20 将其他模块中的全部内容以指定别名导出</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span> from …<span class="token punctuation">;</span> <span class="token comment">// 将其他模块中的指定内容导出</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> import1 <span class="token keyword">as</span> name1<span class="token punctuation">,</span> import2 <span class="token keyword">as</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span> from …<span class="token punctuation">;</span> <span class="token comment">// 将其他模块中的指定内容重命名导出</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">,</span> … <span class="token punctuation">}</span> from …<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>引入</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入默认导出</span>
<span class="token keyword">import</span> defaultExport <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 将所有模块导入到指定命名空间中</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 引入模块中的指定内容</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> export1 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> export1 <span class="token punctuation">,</span> export2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 以指定别名引入模块中的指定内容</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> export1 <span class="token keyword">as</span> alias1 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> export1 <span class="token punctuation">,</span> export2 <span class="token keyword">as</span> alias2 <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 引入默认和其他内容</span>
<span class="token keyword">import</span> defaultExport<span class="token punctuation">,</span> <span class="token punctuation">{</span> export1 <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> defaultExport<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 引入模块</span>
<span class="token keyword">import</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>
<span class="token comment">//导入m4模块，es模块不能省略扩展名(官方标准)</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./m4.mjs&quot;</span>
<span class="token comment">//通过as来指定别名</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a <span class="token keyword">as</span> hello<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./m4.mjs&quot;</span>
<span class="token comment">//开发时要尽量避免import * 情况</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m4 <span class="token keyword">from</span> <span class="token string">&quot;./m4.mjs&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span>
<span class="token comment">//导入模块的默认导出</span>
<span class="token comment">//默认导出的内容，可以随意命名</span>
<span class="token keyword">import</span> hello<span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./m4.mjs&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./m4.mjs&quot;</span>
<span class="token comment">//通过ES模块化，导入的内容都是常量</span>
<span class="token comment">//es模块都是运行在严格模式下的</span>
<span class="token comment">//ES模块化，在浏览器中同样支持，但是通常我们不会直接使用(需要考虑兼容性问题)</span>
             <span class="token comment">//通常都会结合打包工具使用</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
c<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;沙和尚&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点</strong></p><ol><li>ES模块基于文件路径解析</li><li>支持加载内置模块</li><li>相对/绝对路径均可</li><li>没有默认扩展名</li><li>文件夹模块没有主文件</li><li>支持node_modules加载包</li></ol>`,55),c=[t];function l(i,u){return s(),a("div",null,c)}const d=n(o,[["render",l],["__file","mokuaihua.html.vue"]]);export{d as default};
