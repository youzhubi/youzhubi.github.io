import{_ as n,p as s,q as a,Z as e}from"./framework-9675d465.js";const p={},t=e(`<blockquote><p>当我们习惯了在node中编写代码的方式后，在回到前端编写html、css、js这些东西会感觉到各种的不便。比如：不能放心的使用模块化规范 <strong>（浏览器兼容性问题）</strong>，即使可以使用模块化规范也会面临模块过多时的加载问题。我们就迫切的希望有一款工具可以对代码进行打包，<strong>将多个模块打包成一个文件</strong>。这样一来即解决了兼容性问题，又解决了模块过多的问题。构建工具就起到这样一个作用，通过构建工具可以将使用<strong>ESM</strong>规范编写的代码转换为旧的JS语法，这样可以使得所有的浏览器都可以支持代码。</p></blockquote><h2 id="_1-webpack" tabindex="-1"><a class="header-anchor" href="#_1-webpack" aria-hidden="true">#</a> 1.webpack</h2><ul><li>使用步骤： <ol><li>初始化项目<code>yarn init -y</code></li><li>安装依赖<code>webpack</code>、<code>webpack-cli</code>（命令行工具）</li><li>在项目中创建<code>src</code>目录，然后编写代码（index.js）</li><li>执行<code>yarn webpack</code>来对代码进行打包（打包后观察dist目录）</li></ol></li></ul><h3 id="_1-入口起点-entry-points" tabindex="-1"><a class="header-anchor" href="#_1-入口起点-entry-points" aria-hidden="true">#</a> 1.入口起点(entry points)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//mode: &quot;production&quot;, // 设置打包模式，production表示生产模式 development 开发模式</span>
    
    <span class="token comment">//entry: &quot;./hello/hello.js&quot;, // 用来指定打包时的主文件 ./src/index.js 一般不改 约定优于配置</span>
   <span class="token comment">// entry: [&quot;./src/a.js&quot;, &quot;./src/b.js&quot;],</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">&quot;./src/a.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">//通过属性名控制生成的打包文件名</span>
        <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&quot;./src/b.js&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-输出-output" tabindex="-1"><a class="header-anchor" href="#_2-输出-output" aria-hidden="true">#</a> 2.输出(output)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>   
	<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        	<span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 指定打包的目录，必须要绝对路径</span>
        	<span class="token comment">// filename: &quot;main.js&quot;, // 打包后的文件名</span>
        	<span class="token comment">// filename: &quot;[name].js&quot;, // 多个打包文件的文件名 [变量]</span>
        	<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name]-[id]-[hash].js&quot;</span><span class="token punctuation">,</span>
        	<span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 自动清理打包目录</span>
    	<span class="token punctuation">}</span> <span class="token comment">// 配置代码打包后的地址</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-loader" tabindex="-1"><a class="header-anchor" href="#_3-loader" aria-hidden="true">#</a> 3.loader</h3><blockquote><p>webpack默认情况下，只会处理js文件，如果我们希望它可以处理其他类型的文件，则要为其引入loader</p></blockquote><p>以css为例：</p><ul><li>使用css-loader可以处理js中的样式</li><li>使用步骤： 1.安装：yarn add css-loader -D 2.配置：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token comment">/*module: {
            rules: [
                        {
                           test: /\\.css$/i,
                            use:&quot;css-loader&quot; 只负责处理css 单一职责
                           }
                        ]
}*/</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span> <span class="token comment">//顺序不能变 </span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(jpg|png|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset/resource&quot;</span> <span class="token comment">// 图片直接资源类型的数据，可以通过指定type来处理</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在编写js代码时，经常需要使用一些js中的新特性，而新特性在旧的浏览器中兼容性并不好。此时就导致我们无法使用一些新的特性。</li><li>但是我们现在希望能够使用新的特性，我们可以采用折中的方案。依然使用新特性编写代码，但是代码编写完成时我们可以通过一些工具将新代码转换为旧代码。</li><li>babel就是这样一个工具，可以将新的js语法转换为旧的js，以提高代码的兼容性。</li><li>我们如果希望在webpack支持babel，则需要向webpack中引入babel的loader</li></ul><p>使用步骤</p><ol><li>安装 <code>npm install -D babel-loader @babel/core @babel/preset-env</code></li><li>配置：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.在package.json中设置兼容列表</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;browserslist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;defaults&quot;</span>
 <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>https://github.com/browserslist/browserslist</p><h3 id="_4-插件-plugin" tabindex="-1"><a class="header-anchor" href="#_4-插件-plugin" aria-hidden="true">#</a> 4.插件（plugin）</h3><ul><li><p>插件用来为webpack来扩展功能</p></li><li><p>html-webpack-plugin</p><ul><li><p>这个插件可以在打包代码后，自动在打包目录生成<code>html</code>页面</p></li><li><p>使用步骤：</p><ol><li>安装依赖 <code>yarn add -D html-webpack-plugin</code></li><li>配置插件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HTMLPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">// title: &quot;Hello Webpack&quot;, //网站标题</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.html&quot;</span> <span class="token comment">//以这个路径的html文件作为模板</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p><strong>loader和插件（plugin）的区别：loader会对代码进行编译，plugin起到辅助作用</strong></p><h3 id="_5-开发服务器-webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#_5-开发服务器-webpack-dev-server" aria-hidden="true">#</a> 5.开发服务器（webpack-dev-server）</h3><ul><li><p>安装：</p><ul><li><code>yarn add -D webpack-dev-server</code><ul><li>启动：<code>yarn webpack serve</code> <code>yarn webpack serve --open</code> 部署完之后自动在浏览器打开网址。 直接将代码打包到了服务器，需要手动构建。</li></ul></li></ul></li><li><p><code>devtool: &quot;inline-source-map&quot;</code> 配置源码的映射，能够对源码进行调试</p></li></ul><h2 id="_2-vite" tabindex="-1"><a class="header-anchor" href="#_2-vite" aria-hidden="true">#</a> 2.Vite</h2><ul><li><p>Vite也是前端的构建工具</p></li><li><p>相较于webpack，vite采用了不同的运行方式：</p><ul><li>开发时，并不对代码打包，而是直接采用ESM的方式来运行项目</li><li>在项目部署时，在对项目进行打包</li></ul></li><li><p>除了速度外，vite使用起来也更加方便</p></li><li><p>基本使用：</p><ol><li><p>安装开发依赖 vite</p></li><li><p>vite的源码目录就是项目根目录</p></li><li><p>开发命令：</p><p><code>yarn vite</code> 启动开发服务器，随着代码修改刷新。</p><p><code>yarn vite build</code> 打包代码</p><p><code>yarn vite preview</code> 预览打包后代码</p></li></ol></li><li><p>使用命令行构建项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create vite@latest
<span class="token function">yarn</span> create vite
<span class="token function">pnpm</span> create vite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置文件：<code>vite.config.js</code></p></li><li><p>格式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span>
<span class="token keyword">import</span> legacy <span class="token keyword">from</span> <span class="token string">&quot;@vitejs/plugin-legacy&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">legacy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;defaults&quot;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,26),l=[t];function i(o,c){return s(),a("div",null,l)}const u=n(p,[["render",i],["__file","webpackhevite.html.vue"]]);export{u as default};
