import{_ as p,p as o,q as c,s as n,R as s,t as e,Z as a,n as l}from"./framework-9675d465.js";const i={},u=a('<h2 id="_1-为什么使用rest风格" tabindex="-1"><a class="header-anchor" href="#_1-为什么使用rest风格" aria-hidden="true">#</a> 1.为什么使用REST风格</h2><p>我们之前编写的服务器都是传统的服务器，服务器的结构是基于<strong>MVC</strong>模式：</p><ul><li><code>Model</code> -- 数据模型</li><li><code>View</code> -- 视图，用来呈现数据</li><li><code>Controller</code> -- 控制器，复杂加载数据并选择视图来呈现数据</li></ul><p>传统的服务器是直接为客户端返回一个页面，但是传统的服务器并不能适用于现在的应用场景。</p><p>现在的应用场景，一个应用通常都会有多个客户端（client）存在：<strong>web端 移动端（app） pc端</strong> 。</p><p>如果服务器直接返回html页面，那么服务器就只能为web端提供服务，其他类型的客户端还需要单独开发服务器，这样就提高了开发和维护的成本。</p><p><strong>如何解决这个问题？</strong></p><ul><li>传统的服务器需要做两件事情，第一个加载数据，第二个要将模型渲染进视图。</li><li>解决方案就将渲染视图的功能从服务器中剥离出来，服务器只负责向客户端返回数据，渲染视图的工作由客户端自行完成。 分离以后，服务器只提供数据，一个服务器可以同时为多种客户端提供服务器，同时将视图渲染的工作交给客户端以后，简化 了服务器代码的编写。</li></ul><h3 id="_1-rest" tabindex="-1"><a class="header-anchor" href="#_1-rest" aria-hidden="true">#</a> 1.REST</h3><blockquote><p>REpresentational State Transfer ：表示层状态的传输。省略了Resource，全称：Resource REpresentational State Transfer</p></blockquote><p><code>Rest</code>实际上就是一种服务器的设计风格。它的主要<strong>特点</strong>就是，服务器只返回数据，服务器和客户端传输数据时通常会使用<strong>JSON</strong>作为数据格式。<strong>（也就是调用接口来获取数据）</strong> 请求的方法：</p><ul><li><code>GET</code> 加载数据</li><li><code>POST</code> 新建或添加数据</li><li><code>PUT</code> 添加或修改数据</li><li><code>PATCH</code> 修改数据</li><li><code>DELETE</code> 删除数据</li><li><code>OPTION</code> 由浏览器自动发送，检查请求的一些权限</li></ul><p>API（接口） Endpoint（端点） GET /user POST /user DELETE /user/:id ...</p><h3 id="_2-接口是什么" tabindex="-1"><a class="header-anchor" href="#_2-接口是什么" aria-hidden="true">#</a> 2.接口是什么</h3><ul><li>接口是 前后端通信的桥梁</li><li>简单理解：一个接口就是 服务中的一个路由规则 ，根据请求响应结果</li><li>接口的英文单词是 API (Application Program Interface)，所以有时也称之为 API 接口</li><li>这里的接口指的是数据接口，而不是java等其他编程语言里的接口。</li><li>作用：实现前后端的通信</li></ul><h3 id="_3-接口的组成" tabindex="-1"><a class="header-anchor" href="#_3-接口的组成" aria-hidden="true">#</a> 3.接口的组成</h3><ol><li>请求方法</li><li>接口地址（URL）</li><li>请求参数</li><li>响应结果</li></ol>',17),r={href:"https://www.free-api.com/doc/597",target:"_blank",rel:"noopener noreferrer"},d=a('<h3 id="_4-restful-api" tabindex="-1"><a class="header-anchor" href="#_4-restful-api" aria-hidden="true">#</a> 4.RESTful API</h3><p>RESTful API 是一种特殊风格的接口，主要特点有如下几个：</p><ul><li>URL 中的路径表示 资源 ，路径中不能有 动词 ，例如 create , delete , update 等这些都不能有。</li><li>操作资源要与 HTTP 请求方法 对应。</li><li>操作结果要与 HTTP 响应状态码 对应。</li></ul><table><thead><tr><th style="text-align:left;"><div style="width:200;">操作</div></th><th style="text-align:left;">请求类型</th><th><div style="width:50;">URL</div></th></tr></thead><tbody><tr><td style="text-align:left;">新增一首歌曲</td><td style="text-align:left;">POST</td><td>/song</td></tr><tr><td style="text-align:left;">删除一首歌曲</td><td style="text-align:left;">DELETE</td><td>/song/ID</td></tr><tr><td style="text-align:left;">修改一首歌曲 （前端提供该歌曲的全部信息）</td><td style="text-align:left;">PUT</td><td>/song/ID</td></tr><tr><td style="text-align:left;">修改歌曲 （提供该歌曲改动部分的信息）</td><td style="text-align:left;">PATCH</td><td>/song/ID</td></tr><tr><td style="text-align:left;">获取所有歌曲</td><td style="text-align:left;">GET</td><td>/song</td></tr><tr><td style="text-align:left;">获取单个歌曲</td><td style="text-align:left;">GET</td><td>/song/ID</td></tr></tbody></table><h3 id="_5-json-server" tabindex="-1"><a class="header-anchor" href="#_5-json-server" aria-hidden="true">#</a> 5.json-server</h3><p>json-server 本身是一个 JS 编写的工具包，可以快速搭建 RESTful API 服务。</p><p>官方地址: https://github.com/typicode/json-server</p><p><strong>postman</strong></p><ul><li>这是一个软件，通过它可以帮助向服务器发送各种请求，帮助我们测试API</li></ul><h2 id="_2-ajax" tabindex="-1"><a class="header-anchor" href="#_2-ajax" aria-hidden="true">#</a> 2.AJAX</h2><blockquote><p>A 异步 J JavaScript And X xml （Asynchronous JavaScript And XML）异步的js和xml</p><p>AJAX 就是指通过js向服务器发送请求来加载数据。</p></blockquote><p>xml是早期AJAX使用的数据格式 <code>&lt;student&gt;</code><code>&lt;name&gt;&lt;/name&gt;</code><code>&lt;/student&gt;</code> 目前数据格式都使用json {&quot;name&quot;:&quot;孙悟空&quot;}</p><p>可以选择的方案（AJAX发送）：</p><ol><li>XMLHTTPRequest（xhr）</li><li>Fetch</li><li>Axios（封装xhr）</li><li>umi-request（封装fetch）</li></ol><h3 id="_1-cors" tabindex="-1"><a class="header-anchor" href="#_1-cors" aria-hidden="true">#</a> 1.CORS（）</h3>',15),k={href:"http://www.yuanjin.tech/article/99",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>跨域请求：</p><ul><li>如果两个网站的完整域名不相同 a网站：http://haha.com b网站：http://heihei.com</li><li>跨域需要检查三个东西： 协议 域名 端口号 三个只要有一个不同，就算跨域</li><li>当我们通过AJAX去发送跨域请求时，浏览器为了服务器的安全，会阻止js读取到服务器的数据</li></ul><p>解决方案：</p><p>在服务器中设置一个允许跨域的头：<strong>Access-Control-Allow-Origin</strong> 允许那些客户端访问我们的服务器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 设置响应头</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>    
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;GET,POST&quot;</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// Access-Control-Allow-Origin 设置指定值时只能设置一个</span>
    <span class="token comment">// res.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;)</span>
    <span class="token comment">// Access-Control-Allow-Methods 允许的请求的方式</span>
    <span class="token comment">// Access-Control-Allow-Headers 允许传递的请求头</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-xhr的使用" tabindex="-1"><a class="header-anchor" href="#_2-xhr的使用" aria-hidden="true">#</a> 2.xhr的使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建xhr对象</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 设置请求信息</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:3000/students&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// 发送请求</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 设置响应体的类型，设置后会自动对数据进行类型转换</span>
xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&quot;json&quot;</span>
<span class="token comment">// 读取响应</span>
<span class="token comment">// 因为是异步的，发完请求不能立即读取数据，</span>
<span class="token comment">// 因此可以为xhr对象绑定一个load事件，请求完成的时候会触发load 事件</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// xhr.status表示响应状态码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// xhr.response 表示响应信息</span>
        <span class="token comment">// const result = JSON.parse(xhr.response)</span>
        <span class="token comment">// 读取响应信息</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-fetch的使用" tabindex="-1"><a class="header-anchor" href="#_3-fetch的使用" aria-hidden="true">#</a> 3.fetch的使用</h3><blockquote><p>fetch是xhr的升级版，采用的是<code>Promise API</code> 作用和AJAX是一样的，但是使用起来更加友好 fetch原生js就支持的一种ajax请求的方式</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>AJAX测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我加载数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我加载数据2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">const</span> btn2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn2&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> btn2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn2&quot;</span><span class="token punctuation">)</span>

        btn2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:3000/students&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token comment">//application/x-www-form-urlencoded  表单数据</span>
                    <span class="token string-property property">&quot;Content-type&quot;</span><span class="token operator">:</span><span class="token string">&quot;application/json&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">// 通过body去发送数据时，必须通过请求头来指定数据的类型</span>
                <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;白骨精&quot;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&quot;白骨洞&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>


        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">/* 
                fetch
                    - fetch是xhr的升级版，采用的是Promise API
                    - 作用和AJAX是一样的，但是使用起来更加友好
                    - fetch原生js就支持的一种ajax请求的方式
            */</span>
            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:3000/students&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// res.json() 可以用来读取json格式的数据</span>
                        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;请求加载失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 获取到数据后，将数据渲染到页面中</span>
                    <span class="token comment">// console.log(res.data)</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data
                        <span class="token keyword">const</span> table <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">)</span>
                        root<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>
                        table<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&quot;beforeend&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;caption&gt;学生列表&lt;/caption&gt;&quot;</span><span class="token punctuation">)</span>
                        table<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&quot;beforeend&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
                            &lt;thead&gt;
                                &lt;tr&gt;
                                    &lt;th&gt;学号&lt;/th&gt;
                                    &lt;th&gt;姓名&lt;/th&gt;
                                    &lt;th&gt;年龄&lt;/th&gt;
                                    &lt;th&gt;性别&lt;/th&gt;
                                    &lt;th&gt;地址&lt;/th&gt;
                                &lt;/tr&gt;
                            &lt;/thead&gt;
                        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

                        <span class="token keyword">const</span> tbody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;tbody&quot;</span><span class="token punctuation">)</span>
                        table<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tbody<span class="token punctuation">)</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> stu <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            tbody<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&quot;beforeend&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
                                &lt;tr&gt;
                                    &lt;td&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stu<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/td&gt;
                                    &lt;td&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stu<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/td&gt;
                                    &lt;td&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stu<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/td&gt;
                                    &lt;td&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stu<span class="token punctuation">.</span>gender<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/td&gt;
                                    &lt;td&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stu<span class="token punctuation">.</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/td&gt;
                                &lt;/tr&gt;
                        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出错了！&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>中断请求</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        <span class="token keyword">let</span> controller
        btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建一个AbortController</span>
            controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">// 终止请求</span>
            <span class="token comment">// setTimeout(() =&gt; { controller.abort() }, 3000)</span>
            <span class="token comment">// 点击向test发送请求</span>
            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:3000/test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">signal</span><span class="token operator">:</span> controller<span class="token punctuation">.</span>signal
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        btn02<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            controller <span class="token operator">&amp;&amp;</span> controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将fetch改写为await版本</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> btn03<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// fetch(&quot;http://localhost:3000/test&quot;).then()...</span>
            <span class="token comment">// 注意：将promise改写为await时，一定要改写try-catch</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:3000/students&quot;</span><span class="token punctuation">)</span>
                <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-本地存储" tabindex="-1"><a class="header-anchor" href="#_3-本地存储" aria-hidden="true">#</a> 3.本地存储</h2><blockquote><p>所谓的本地存储就是指浏览器自身的存储空间， 可以将用户的数据存储到浏览器内部</p></blockquote><ol><li><strong>sessionStorage 中存储的数据 页面一关闭就会丢失</strong></li><li><strong>localStorage 存储的时间比较长</strong></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// console.log(sessionStorage)</span>

            <span class="token comment">// setItem() 用来存储数据</span>
            <span class="token comment">// getItem() 用来获取数据</span>
            <span class="token comment">// removeItem() 删除数据</span>
            <span class="token comment">// clear() 清空数据</span>
            <span class="token comment">// sessionStorage.setItem(&quot;name&quot;, &quot;孙悟空&quot;)</span>
            <span class="token comment">// sessionStorage.setItem(&quot;age&quot;, &quot;18&quot;)</span>
            <span class="token comment">// sessionStorage.setItem(&quot;gender&quot;, &quot;男&quot;)</span>
            <span class="token comment">// sessionStorage.setItem(&quot;address&quot;, &quot;花果山&quot;)</span>

            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">)</span>
            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span>
            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span>
            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;花果山&quot;</span><span class="token punctuation">)</span>

            <span class="token comment">// const name = sessionStorage.getItem(&quot;name&quot;)</span>
            <span class="token comment">// console.log(name)</span>

            <span class="token comment">// sessionStorage.removeItem(&quot;name&quot;)</span>
            <span class="token comment">// sessionStorage.clear()</span>

            localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-token" tabindex="-1"><a class="header-anchor" href="#_4-token" aria-hidden="true">#</a> 4.token</h2><blockquote><p>问题： - 现在是登录以后直接将用户信息存储到了localStorage - 主要存在两个问题： 1.数据安全问题 2.服务器不知道你有没有登录（如果服务器没有验证可以直接通过抓取api（接口）来获取数据）</p></blockquote><p><strong>解决问题：</strong></p><p><strong>如何告诉服务器客户端的登录状态</strong></p><ul><li><p><code>rest</code>风格的服务器是<strong>无状态</strong>的服务器，所以注意不要在服务器中存储用户的数据</p></li><li><p>服务器中不能存储用户信息，可以将用户信息发送给客户端保存</p><p>​ 比如：{id:&quot;xxx&quot;, username:&quot;xxx&quot;, email:&quot;xxx&quot;} 客户端每次访问服务器时，直接将用户信息发回，服务器就可以根据用户信息来识别用户的身份</p></li><li><p>但是如果将数据直接发送给客户端同样会有数据安全的问题，所以我们必须对数据进行加密，加密以后在发送给客户端保存，这样即可避免数据的泄露。</p></li><li><p>在node中可以直接使用<code>jsonwebtoken</code>这个包来对数据进行加密，jsonwebtoken（jwt） --&gt; 通过对json加密后，生成一个web中使用的令牌。</p></li><li><p>使用步骤：</p><ol><li>安装 <code>yarn add jsonwebtoken</code></li><li>引入 <code>const jwt = require(&quot;jsonwebtoken&quot;)</code></li><li>.... <code>https://www.npmjs.com/package/jsonwebtoken</code></li></ol></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入jwt</span>
<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;jsonwebtoken&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建一个对象</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;孙悟空&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用jwt来对json数据进行加密</span>
<span class="token comment">// expiresIn有效时间 数字1一秒 字符串&quot;1&quot; 一毫秒</span>
<span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 服务器收到客户端的token后</span>
    <span class="token comment">// 需要解密查看信息是否正确</span>
    <span class="token keyword">const</span> decodeData <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decodeData<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 说明token解码失败，说明token无效</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;无效的token&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-axios" tabindex="-1"><a class="header-anchor" href="#_5-axios" aria-hidden="true">#</a> 5.Axios</h2>`,26),m=n("code",null,"Axios",-1),b=n("code",null,"*promise*",-1),g={href:"https://nodejs.org/",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"node.js",-1),q=n("em",null,[n("strong",null,"isomorphic")],-1),f=n("code",null,"http",-1),y=n("strong",null,"而在客户端 (浏览端) 则使用 XMLHttpRequests。",-1),x=a(`<h3 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装" aria-hidden="true">#</a> 1.安装</h3><p>使用 npm:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ npm install axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 bower:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ bower install axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 yarn:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ yarn add axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 jsDelivr CDN:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 unpkg CDN:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2.使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// 直接调用axios发送请求</span>
            <span class="token comment">// axios(config)</span>
            <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:3000/students&quot;</span><span class="token punctuation">,</span>
                <span class="token comment">//请求参数</span>
                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&quot;女儿国&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">// 自动识别</span>
                <span class="token comment">// data:&quot;name=swk&amp;age=18&quot;</span>

            <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment">// axios.post(&quot;http://localhost:3000&quot;,</span>
            <span class="token comment">//     {</span>
            <span class="token comment">//         name: &quot;孙悟空&quot;</span>
            <span class="token comment">//     }</span>
            <span class="token comment">// )</span>
        <span class="token punctuation">}</span>

         document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 直接调用axios发送请求</span>
                <span class="token comment">// axios(config)</span>
                <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:3000/students&quot;</span><span class="token punctuation">,</span>

                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token comment">// axios默认只会在响应状态为2xx时才会调用then</span>
                        <span class="token comment">// result是axios封装过的</span>
                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-请求配置" tabindex="-1"><a class="header-anchor" href="#_3-请求配置" aria-hidden="true">#</a> 3.请求配置</h3><blockquote><p>这些是创建请求时可以用的配置选项。只有 <code>url</code> 是必需的。如果没有指定 <code>method</code>，请求将默认使用 <code>GET</code> 方法。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 直接调用axios发送请求</span>
            <span class="token comment">// axios(config)</span>
            <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token comment">// baseURL 指定服务器的根目录（路径的前缀）</span>
                <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:3000&quot;</span><span class="token punctuation">,</span>
                <span class="token comment">//请求地址</span>
                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span>
                <span class="token comment">// 请求方法，默认是get</span>
                <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
                <span class="token comment">// 指定请求头</span>
                <span class="token comment">// headers: {&quot;Content-type&quot;:&quot;application/json&quot;}</span>
                <span class="token comment">// 仅适用 &#39;PUT&#39;, &#39;POST&#39;, &#39;DELETE 和 &#39;PATCH&#39; 请求方法</span>
                <span class="token comment">// data: &quot;name=唐僧&amp;age=16&quot;,</span>
                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;唐僧&quot;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&quot;女儿国&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">// params 用来指定路径中的查询字符串</span>
                <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;swk&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">// timeout 过期时间</span>
                <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span>

                <span class="token comment">// 用来终止请求 </span>
                <span class="token comment">// signal</span>

                <span class="token comment">//transformRequest 可以用来处理请求数据（data）</span>
                <span class="token comment">//它需要一个数组作为参数，数组可以接收多个函数，请求发送时多个函数会按照顺序执行</span>
                <span class="token comment">// 函数在执行时，会接收到两个参数data和headers</span>
                <span class="token literal-property property">transformRequest</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;孙悟空&quot;</span>
                    headers<span class="token punctuation">[</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;application/json&quot;</span>
                    <span class="token comment">// console.log(data)</span>
                    <span class="token comment">// console.log(headers)</span>
                    <span class="token keyword">return</span> data
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>headers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 最后一个函数必须返回一个字符串，才能使得数据有效</span>
                    <span class="token comment">// console.log(data)</span>
                    <span class="token comment">// console.log(headers)</span>
                    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment">// axios.post(&quot;http://localhost:3000&quot;,</span>
            <span class="token comment">//     {</span>
            <span class="token comment">//         name: &quot;孙悟空&quot;</span>
            <span class="token comment">//     }</span>
            <span class="token comment">// )</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-响应结构" tabindex="-1"><a class="header-anchor" href="#_4-响应结构" aria-hidden="true">#</a> 4.响应结构</h3><p>一个请求的响应包含以下信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// \`data\` 由服务器提供的响应</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// \`status\` 来自服务器响应的 HTTP 状态码</span>
  <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>

  <span class="token comment">// \`statusText\` 来自服务器响应的 HTTP 状态信息</span>
  <span class="token literal-property property">statusText</span><span class="token operator">:</span> <span class="token string">&#39;OK&#39;</span><span class="token punctuation">,</span>

  <span class="token comment">// \`headers\` 是服务器响应头</span>
  <span class="token comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span>
  <span class="token comment">// 例如: \`response.headers[&#39;content-type&#39;]\`</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// \`config\` 是 \`axios\` 请求的配置信息</span>
  <span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// \`request\` 是生成此响应的请求</span>
  <span class="token comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span>
  <span class="token comment">// 在浏览器中则是 XMLHttpRequest 实例</span>
  <span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-默认配置" tabindex="-1"><a class="header-anchor" href="#_5-默认配置" aria-hidden="true">#</a> 5.默认配置</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">;</span>
axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">&#39;Authorization&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">AUTH_TOKEN</span><span class="token punctuation">;</span>
axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-实例" tabindex="-1"><a class="header-anchor" href="#_6-实例" aria-hidden="true">#</a> 6.实例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">&quot;http://localhost:3000&quot;</span>
        axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token comment">// axios实例相当于是axios的一个副本，它的功能和axios一样</span>
        <span class="token comment">// axios的默认配置是在实例也同样会生效</span>
        <span class="token comment">// 但是我可以单独修改axios实例的默认配置</span>
        
        <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">&quot;baseURL:http://localhost:4000&quot;</span>


        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            instance
            <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;students&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-拦截器" tabindex="-1"><a class="header-anchor" href="#_7-拦截器" aria-hidden="true">#</a> 7.拦截器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">&quot;http://localhost:3000&quot;</span>

        <span class="token comment">// axios的拦截器可以对请求或响应进行拦截，在请求发送前和响应读取前处理数据</span>
        <span class="token comment">// 添加请求拦截器</span>
        axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;拦截器执行了&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">// config 表示axios中的配置对象</span>
            <span class="token comment">// console.log(config)</span>
            config<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;著哈哈&quot;</span>
            <span class="token comment">// config.headers[&quot;Authorization&quot;] = \`Bearer \${localStorage.getItem(&quot;token&quot;)}\`</span>
            <span class="token comment">// 在发送请求之前做些什么</span>
            <span class="token keyword">return</span> config<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 对请求错误做些什么</span>
            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        axios<span class="token punctuation">.</span>interceptors
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// axios</span>
            <span class="token comment">//     .post(&quot;students&quot;, { name: &quot;猪八戒&quot; })</span>
            <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;students&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;猪八戒&quot;</span> <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你稍后需要移除拦截器，可以这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myInterceptor <span class="token operator">=</span> axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">eject</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also clear all interceptors for <strong>requests</strong> or <strong>responses</strong>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Removes interceptors from requests</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Removes interceptors from responses</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function j(w,_){const t=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("接口实例"),e(t)])]),d,n("blockquote",null,[n("p",null,[s("CORS（Cross-Origin Resource Sharing，跨域资源共享）"),n("a",k,[s("CORS详解"),e(t)])])]),v,n("p",null,[m,s(" 是一个基于 "),b,s(" 网络请求库，作用于"),n("a",g,[h,e(t)]),s(" 和浏览器中。 它是 "),q,s(" 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js "),f,s(" 模块, "),y]),x])}const T=p(i,[["render",j],["__file","RESTheAJAX.html.vue"]]);export{T as default};
