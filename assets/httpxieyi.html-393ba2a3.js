import{_ as t,p as n,q as a,Z as s}from"./framework-9675d465.js";const e={},l=s(`<blockquote><p>Hypertext Transfer Protocol 超文本传输协议</p></blockquote><ul><li>网络基础</li><li>网络的服务器基于请求和响应的</li></ul><hr><p>​ https://lilichao.com/hello/index.html</p><p>https:// 协议名 http ftp ...</p><p>lilichao.com 域名 <strong>（domain）</strong>：整个网络中存在着无数个服务器，每一个我服务器都有它自己的唯一标识，这个标识被称为 ip地址比如 <strong>192.168.1.17</strong>，但是ip地址不方便记忆，域名就相当于是ip地址的别名。</p><p>/hello/index.html 网站资源路径</p><h2 id="两道经典面试题" tabindex="-1"><a class="header-anchor" href="#两道经典面试题" aria-hidden="true">#</a> 两道经典面试题</h2><p><strong>1.当在浏览器中输入地址以后发生了什么？</strong> ① DNS解析，获取网站的ip地址**（相当于电话号码本，在里面查找）** ② 浏览器需要和服务器建立连接（tcp/ip）（三次握手） ③ 向服务器发送请求（http协议） ④ 服务器处理请求，并返回响应（http协议） ⑤ 浏览器将响应的页面渲染 ⑥ 断开和服务器的连接（四次挥手）</p><p><strong>2.客户端如何和服务器建立（断开）连接</strong></p><ul><li>通过三次握手和四次挥手 <ul><li><p><em><strong>三次握手（建立连接）</strong></em></p><ul><li>三次握手是客户端和服务器建立连接的过程 <ol><li>客户端向服务器发送连接请求**（电话拨号）** SYN**(synchronous建立联机)**</li><li>服务器收到连接请求，向客户端返回消息**（听到铃声，接通电话，喂，你能听到我说话吗）** SYN ACK <strong>(acknowledgement同意，确认)</strong></li><li>客户端向服务器发送同意连接的信息**（我能听到你说话了，咱们开始吧）** ACK</li></ol></li></ul></li><li><p><em><strong>四次挥手（断开连接）</strong></em></p><ol><li>客户端向服务器发送请求，通知服务器数据发送完毕，请求断开来接**（我说完了）**</li></ol><p>​ FIN**(finish结束)**</p><ol start="2"><li>服务器向客户端返回数据，知道了**（行，我知道了）**发完了，不一定数据就收完了，中间可能有丢包</li></ol><p>​ ACK</p><ol start="3"><li>服务器向客户端返回数据，收完了，可以断开连接**（我也没事了）**</li></ol><p>​ FIN ACK</p><ol start="4"><li>客户端向服务器发数据，可以断开了**（挂断电话）**</li></ol><p>​ ACK</p></li></ul></li></ul><p>请求和响应实际上就是一段数据，只是这段数据需要遵循一个特殊的格式， 这个特殊的格式由HTTP协议来规定</p><h2 id="tcp-ip-协议族-了解" tabindex="-1"><a class="header-anchor" href="#tcp-ip-协议族-了解" aria-hidden="true">#</a> TCP/IP 协议族（了解）</h2><ul><li><p>TCP/IP协议族中包含了一组协议 这组协议规定了互联网中所有的通信的细节</p></li><li><p>网络通信的过程由四层组成 <strong>应用层</strong>：软件的层面，浏览器 服务器都属于应用层</p><p><strong>传输层</strong>：负责对数据进行拆分，把大数据拆分为一个一个小包 <strong>网络层</strong>：负责给数据包，添加信息 <strong>数据链路层</strong>：传输信息</p></li><li><p>HTTP协议就是应用层的协议，用来规定客户端和服务器间通信的报文格式的协议</p></li><li><p>报文（message）</p><ul><li>浏览器和服务器之间通信是基于请求和响应的 <ul><li>浏览器向服务器发送请求（request）</li><li>服务器向浏览器返回响应（response）</li><li>浏览器向服务器发送请求相当于浏览器给服务器写信， 而服务器向浏览器返回响应，相当于服务器给浏览器回信 这个信在HTTP协议中就被称为报文。</li><li>而HTTP协议就是对这个报文的格式进行规定</li></ul></li></ul></li><li><p><strong>服务器</strong></p><ul><li>一个服务器的<strong>主要功能</strong>：</li></ul><p>​ <strong>1.可以接收到浏览器发送的请求报文</strong><strong>2.可以向浏览器返回响应报文</strong></p></li></ul><h2 id="请求报文-request" tabindex="-1"><a class="header-anchor" href="#请求报文-request" aria-hidden="true">#</a> <strong>请求报文（request）</strong></h2><blockquote><p>客户端发送给服务器的报文称为请求报文</p></blockquote><p>请求报文的格式如下：</p><ol><li><strong>请求首行</strong></li><li><strong>请求头</strong></li><li><strong>空行</strong></li><li><strong>请求体</strong></li></ol><h3 id="_1-请求首行-请求行" tabindex="-1"><a class="header-anchor" href="#_1-请求首行-请求行" aria-hidden="true">#</a> <strong>1.请求首行</strong>(请求行)</h3><p><strong>请求首行就是请求报文的第一行</strong></p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">GET</td><td style="text-align:center;">主要用于获取数据</td></tr><tr><td style="text-align:center;">POST</td><td style="text-align:center;">主要用于新增数据</td></tr><tr><td style="text-align:center;">PUT/PATCH</td><td style="text-align:center;">主要用于更新数据</td></tr><tr><td style="text-align:center;">DELETE</td><td style="text-align:center;">主要用于删除数据</td></tr><tr><td style="text-align:center;">HEAD/OPTIONS/CONNECT/TRACE</td><td style="text-align:center;">使用相对较少</td></tr></tbody></table><p><code>GET /index.html?username=aaa HTTP/1.1</code></p><ul><li><p><strong>第一部分 get 表示请求的方式，get表示发送的是get请求</strong></p><ul><li>现在常用的方式就是<code>get</code>和<code>post</code>请求</li><li><code>get</code>请求主要用来向服务器请求资源</li><li><code>post</code>请求主要用来向服务器发送数据</li></ul></li><li><p><strong>第二部分 /index.html?username=aaa （URL Uniform Resource Locator 统一资源定位符）</strong></p><ul><li><strong>表示请求资源的路径，</strong><code>？</code><strong>后边的内容叫做查询字符串</strong><ul><li>查询字符串是一个名值对结构，一个名字对应一个值，使用=连接，多个名值对之间使用&amp;分割**(username=admin&amp;password=123123)**</li></ul></li><li><code>get</code><em><strong>请求通过查询字符串将数据发送给服务器</strong></em><ul><li>由于查询字符串会在浏览器地址栏中直接显示。所以，它安全性较差，同时，由于url地址长度有限制，所以get请求无法发送较大的数据</li></ul></li><li><code>post</code><em><strong>请求通过请求体来发送数据</strong></em><ul><li>在chrome中通过 载荷 可以查看。post请求通过请求体发送数据，无法在地址栏直接查看，所以安全性较好，请求体的大小没有限制，可以发送任意大小的数据，如果你需要向服务器发送数据，能用post尽量使用post。</li></ul></li></ul></li><li><p><strong>第三部分 HTTP/1.1 协议的版本</strong></p><table><thead><tr><th style="text-align:center;">版本号</th><th style="text-align:center;">发布时间</th></tr></thead><tbody><tr><td style="text-align:center;">1.0</td><td style="text-align:center;">1996年</td></tr><tr><td style="text-align:center;">1.1</td><td style="text-align:center;">1999年</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">2015年</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">2018年</td></tr></tbody></table><p>​</p></li></ul><h3 id="_2-请求头" tabindex="-1"><a class="header-anchor" href="#_2-请求头" aria-hidden="true">#</a> <strong>2.请求头</strong></h3><ul><li><p>请求头也是名值对结构，用来告诉服务器我们浏览器的信息</p></li><li><p>每一个请求头都有它的作用：</p><ol><li><code>Accept</code> ：浏览器可以接受的文件类型</li><li><code>Accept-Encoding</code> ：浏览器允许的压缩的编码</li><li><code>User-Agent</code> ：用来标识客户端（例如浏览器、移动应用等）的信息。它通常包含了客户端的名称、版本号、操作系统和设备信息等。</li><li><code>Accept-Language</code> ： 客户端、浏览器可以接受的语言</li></ol><p>​</p></li></ul><h3 id="_3-空行" tabindex="-1"><a class="header-anchor" href="#_3-空行" aria-hidden="true">#</a> <strong>3.空行</strong></h3><ul><li>用来分隔请求头和请求体</li></ul><h3 id="_4-请求体" tabindex="-1"><a class="header-anchor" href="#_4-请求体" aria-hidden="true">#</a> <strong>4.请求体</strong></h3><ul><li>post请求通过请求体来发送数据</li></ul><p>请求报文：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>GET /07_http%E5%8D%8F%E8%AE%AE/01_http%E5%8D%8F%E8%AE%AE.html?username=aaa HTTP/1.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,/;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9
Cache-Control: max-age=0
Connection: keep-alive
Host: 127.0.0.1:5500
If-Modified-Since: Sat, 29 Oct 2022 05:45:42 GMT
If-None-Match: W/&quot;1a6-18422464af5&quot;
Referer: http://127.0.0.1:5500/07_http%E5%8D%8F%E8%AE%AE/01_http%E5%8D%8F%E8%AE%AE.html?username=aaa
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: same-origin
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36
sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;107&quot;, &quot;Chromium&quot;;v=&quot;107&quot;, &quot;Not=A?Brand&quot;;v=&quot;24&quot;
sec-ch-ua-mobile: ?0
sec-ch-ua-platform: &quot;Windows&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应报文" tabindex="-1"><a class="header-anchor" href="#响应报文" aria-hidden="true">#</a> 响应报文</h2><blockquote><p>服务器向浏览器返回响应</p></blockquote><p>响应报文的格式如下：</p><ol><li><strong>响应首行</strong></li><li><strong>响应头</strong></li><li><strong>空行</strong></li><li><strong>响应体</strong></li></ol><h3 id="_1-响应首行" tabindex="-1"><a class="header-anchor" href="#_1-响应首行" aria-hidden="true">#</a> <strong>1.响应首行</strong></h3><ul><li>HTTP/1.1 200 OK <ul><li>HTTP/1.1 版本号</li><li><strong>200</strong> 响应状态码 参考：https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</li><li><strong>ok</strong> 对响应状态码的描述</li></ul></li><li>响应状态码的规则 <ul><li>1xx 请求处理中</li><li>2xx 表示成功</li><li>3xx 表示请求的重定向 <strong>输入A.com 进入到 B.com</strong></li><li>4xx 表示客户端错误</li><li>5xx 表示服务器的错误</li></ul></li></ul><h3 id="_2-响应头" tabindex="-1"><a class="header-anchor" href="#_2-响应头" aria-hidden="true">#</a> <strong>2.响应头</strong></h3><ul><li>响应头也是一个一个的名值对结构，用来告诉浏览器响应的信 <ul><li>Cache-Control：缓存控制 private 私有的，只允许客户端缓存数据</li><li>Connection：链接设置</li><li><code>Content-Type</code> ： 用来描述响应体的类型 <ul><li>Content-Type ： text/html; charset=UTF-8 响应体为html，字符集utf-8</li></ul></li><li><code>Content-Length</code> ： 用来描述响应体大小，单位为字节 <ul><li>Content-Length ： 1915</li></ul></li></ul></li></ul><h3 id="_3-空行-1" tabindex="-1"><a class="header-anchor" href="#_3-空行-1" aria-hidden="true">#</a> <strong>3.空行</strong></h3><ul><li>空行用来分隔响应头和响应体</li></ul><h3 id="_4-响应体" tabindex="-1"><a class="header-anchor" href="#_4-响应体" aria-hidden="true">#</a> <strong>4.响应体</strong></h3><ul><li>响应体就是服务器返回给客户端的内容</li></ul><p><strong>网页、css、 js、图片这些资源会作为响应报文中的响应体发送</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zh<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=e
            &lt;meta name=<span class="token punctuation">&quot;</span></span><span class="token attr-name">viewport&quot;</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-widt
            &lt;title&gt;Document&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;form method=<span class="token punctuation">&quot;</span></span><span class="token attr-name">post&quot;</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./02_target.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应报文：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>    HTTP/1.1 200 OK
    Vary: Origin
    Access-Control-Allow-Credentials: true
    Accept-Ranges: bytes
    Cache-Control: public, max-age=0
    Last-Modified: Sat, 29 Oct 2022 05:45:42 GMT
    Date: Sat, 29 Oct 2022 06:54:00 GMT
    ETag: W/&quot;1a6-18422464af5&quot;
    Content-Type: text/html; charset=UTF-8
    Content-Length: 1915  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ip地址" tabindex="-1"><a class="header-anchor" href="#ip地址" aria-hidden="true">#</a> IP地址</h2><blockquote><p>IP也称为地址，本身是一个数字标识 。例如 192.168.1.3</p></blockquote><p>IP本质上是一个32Bit二进制数字 11000000101010000000000100000011 这样是不利于查看所以拆分为四组每组8个Bit</p><p>11000000 <code>192</code> 10101000 <code>168</code> 00000001 <code>1</code> 00000011 <code>3</code> 192.168.1.3</p><p>作用：IP用来标识网络中的设备，实现设备间通信</p><p>IP的分类</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>本机回环IP地址</td><td>127.0.0.1~127.255.255.254</td></tr><tr><td>局域网P(私网P)</td><td>192.168.0.0~192.168.255.255 172.16.0.0~172.31.255.255 10.0.0.0~10.255.255.255</td></tr><tr><td>广域网P（公网P)</td><td>除上述之外</td></tr></tbody></table><h2 id="静态资源服务" tabindex="-1"><a class="header-anchor" href="#静态资源服务" aria-hidden="true">#</a> 静态资源服务</h2><p>静态资源是指<code>内容长时间不发生改变的资源</code>，例如图片，视频，css文件，js文件，html文件，字体文件等动态资源是指<code>内容经常更新的资源</code>，例如百度首页，网易首页，京东搜索列表页面等</p><p>###网站根目录或静态资源目录</p><p>HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 静态资源目录 ，也称之为 网站根目录。</p><h2 id="get和post请求" tabindex="-1"><a class="header-anchor" href="#get和post请求" aria-hidden="true">#</a> GET和POST请求</h2><p>GET 请求的情况：</p><ul><li>在地址栏直接输入 url 访问</li><li>点击 a 链接</li><li>link 标签引入 css</li><li>script 标签引入 js</li><li>img 标签引入图片</li><li>form 标签中的 method 为 get （不区分大小写）</li><li>ajax 中的 get 请求</li></ul><p>POST 请求的情况：</p><ul><li>form 标签中的 method 为 post（不区分大小写）</li><li>AJAX 的 post 请求</li></ul><h3 id="get和post请求区别" tabindex="-1"><a class="header-anchor" href="#get和post请求区别" aria-hidden="true">#</a> GET和POST请求区别</h3><ul><li>GET 主要用来获取数据，POST 主要用来提交数据</li><li>GET 带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求， POST 带参数请求是将参数放到请求体中</li><li>POST 请求相对 GET 安全一些，因为在浏览器中参数会暴露在地址栏</li><li>GET 请求大小有限制，一般为 2K，而 POST 请求则没有大小限制</li></ul>`,65),i=[l];function o(p,c){return n(),a("div",null,i)}const d=t(e,[["render",o],["__file","httpxieyi.html.vue"]]);export{d as default};
