import{_ as e,p as t,q as o,s as n,R as s,t as p,Z as c,n as l}from"./framework-9675d465.js";const i="/vue2Images/babelconfig.png",r="/vue2Images/babel.png",u={},d=c(`<h2 id="路由懒加载" tabindex="-1"><a class="header-anchor" href="#路由懒加载" aria-hidden="true">#</a> 路由懒加载</h2><blockquote><p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。这时候就需要用到路由的懒加载。</p></blockquote><p>懒加载方法详解：https://cloud.tencent.com/developer/article/2154985</p><p>今天在使用下面此方法进行路由懒加载时遇到了一些问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;demo&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/demo&quot;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;pay&quot; */</span> <span class="token string">&quot;@/pages/Demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现这么写懒加载无效，<strong>打包之后仍然没有分模块打包js文件</strong>，需要在vue.config.js里面配置如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;./js/[name].[contenthash].js&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>output.filename</code> 设置为 <code>[name].[contenthash].js</code>，其中 <code>name</code> 表示 chunk 的名称，<code>contenthash</code> 表示 chunk 的内容哈希值。这样，如果一个 chunk 的内容发生了变化，那么它的文件名也会发生变化。</p>`,8),k={href:"https://babeljs.io/docs/plugins/syntax-dynamic-import/",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"syntax-dynamic-import",-1),v=n("p",null,"不过也不需要单独再出安装这个插件，因为见下图：",-1),h=n("p",null,[n("img",{src:i,alt:""})],-1),b=n("p",null,[s("​ "),n("img",{src:r,alt:""})],-1),_=n("p",null,[s("这个插件已经包含在**@babel/preset-env**里了，而这个插件又被"),n("code",null,"@vue/cli-plugin-babel/preset包含"),s("。所以无需再单独安装这个插件。")],-1);function g(y,f){const a=l("ExternalLinkIcon");return t(),o("div",null,[d,n("p",null,[s("官方也说了：如果您使用的是 Babel，你将需要添加 "),n("a",k,[m,s(" (opens new window)"),p(a)]),s("插件，才能使 Babel 可以正确地解析语法。")]),v,h,b,_])}const q=e(u,[["render",g],["__file","vueRouter3lanjiazaishiyongdewenti.html.vue"]]);export{q as default};
