import{_ as t,p as o,q as p,s as n,R as a,t as i,Z as s,n as c}from"./framework-9675d465.js";const l={},u=s(`<h2 id="媒体元素" tabindex="-1"><a class="header-anchor" href="#媒体元素" aria-hidden="true">#</a> 媒体元素</h2><h3 id="_1-audio和video的共同属性" tabindex="-1"><a class="header-anchor" href="#_1-audio和video的共同属性" aria-hidden="true">#</a> 1.audio和video的共同属性</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">controls</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/media/cc0-audio/t-rex-roar.mp3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/media/cc0-audio/t-rex-roar.mp3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                Download audio
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-autoplay" tabindex="-1"><a class="header-anchor" href="#_1-autoplay" aria-hidden="true">#</a> 1.autoplay</h4><p>布尔值属性；声明该属性，音频会尽快自动播放，不会等待整个音频文件下载完成。</p><blockquote><p><strong>备注：</strong> 谷歌浏览器会强制关闭自动播放，如需开启自动播放需要开启静音（muted）</p></blockquote><h4 id="_2-controls" tabindex="-1"><a class="header-anchor" href="#_2-controls" aria-hidden="true">#</a> 2.controls</h4><p>如果声明了该属性，浏览器将提供一个包含声音，播放进度，播放暂停的控制面板，让用户可以控制音频的播放。</p><h4 id="_3-currenttime" tabindex="-1"><a class="header-anchor" href="#_3-currenttime" aria-hidden="true">#</a> 3.currentTime</h4><p>读取 currentTime 属性将返回一个双精度浮点值，用以标明以秒为单位的当前音频的播放位置。getStartDate() 方法能够用于确定媒体时间轴的开始位置。</p><h4 id="_4-duration-只读" tabindex="-1"><a class="header-anchor" href="#_4-duration-只读" aria-hidden="true">#</a> 4.duration（只读）</h4>`,11),d=n("code",null,"NaN",-1),r={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"+Infinity",-1),k=s(`<h4 id="_5-loop" tabindex="-1"><a class="header-anchor" href="#_5-loop" aria-hidden="true">#</a> 5.loop</h4><p>布尔属性；如果声明该属性，将循环播放音频。</p><h4 id="_6-muted" tabindex="-1"><a class="header-anchor" href="#_6-muted" aria-hidden="true">#</a> 6.muted</h4><p>表示是否静音的布尔值。默认值为 false，表示有声音。</p><h4 id="_7-src" tabindex="-1"><a class="header-anchor" href="#_7-src" aria-hidden="true">#</a> 7.src</h4><p>嵌入的音频的 URL。 这是一个可选属性；你可以在 audio 元素中使用 <source> 元素来替代该属性指定嵌入的音频。</p><h4 id="_8-preload" tabindex="-1"><a class="header-anchor" href="#_8-preload" aria-hidden="true">#</a> 8.preload</h4><ul><li><code>none</code>: 示意用户可能不会播放该音频，或者服务器希望节省带宽；换句话说，该音频不会被缓存；</li><li><code>metadata</code>: 示意即使用户可能不会播放该音频，但获取元数据 (例如音频长度) 还是有必要的。</li><li><code>auto</code>: 示意用户可能会播放音频；换句话说，如果有必要，整个音频都将被加载，即使用户不期望使用。</li><li><em>空字符串</em> : 等效于<code>auto</code>属性。不同浏览器会有自己的默认值，规范建议的默认值为 <code>metadata</code>。</li></ul><h3 id="_2-视频的额外特性" tabindex="-1"><a class="header-anchor" href="#_2-视频的额外特性" aria-hidden="true">#</a> 2.视频的额外特性</h3><ul><li>poster：海报帧图片 URL，用于在视频处于下载中的状态时显示。如果未指定该属性，则在视频第一帧可用之前不会显示任何内容，然后将视频的第一帧会作为海报（poster）帧来显示。</li><li>width和height：设置视频的尺寸</li><li>videoWith和videoHeight：只读视频的实际尺寸</li></ul><h3 id="_3-媒体元素属性" tabindex="-1"><a class="header-anchor" href="#_3-媒体元素属性" aria-hidden="true">#</a> 3.媒体元素属性</h3><ul><li>paused(只读)：视频是否正在暂停。true 暂停中 ，false 没有暂停</li><li>ended（只读）：媒体是否播放完毕</li><li>play()：媒体播放</li><li>pause：媒体暂停</li><li>load()：媒体重新加载</li></ul><h3 id="_4-媒体元素事件" tabindex="-1"><a class="header-anchor" href="#_4-媒体元素事件" aria-hidden="true">#</a> 4.媒体元素事件</h3><ul><li><p>pause()：当暂停媒体播放时 <code>pause</code> 事件触发，并且媒体进入暂停状态，最常见的是通过<code>pause()</code>方法来触发。</p><ul><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;video&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pause&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
video<span class="token punctuation">.</span><span class="token function-variable function">onpause</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>ended()：该事件通常用于提示播放完成的信息，例如 &quot;谢谢收听&quot;, &quot;谢谢观看&quot; 等。</p><ul><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;video&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
video<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;ended&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
video<span class="token punctuation">.</span><span class="token function-variable function">onended</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>loadedmetadata：媒体的元数据已经加载完毕，现在所有属性包含了它们应有的有效信息。</p></li><li><p>timeupdate：当<code>currentTime</code>更新时会触发<code>timeupdate</code>事件。</p></li></ul>`,14);function v(m,_){const e=c("ExternalLinkIcon");return o(),p("div",null,[u,n("p",null,[a("这是一个双精度浮点数，指明了音频在时间轴中的持续时间（总长度），以秒为单位。如果元素上没有媒体，或者媒体是不可用的，那么会返回 "),d,a("。如果媒体找不到确切的结尾（比如不确定长度的直播流，网络电台，或者是通过 "),n("a",r,[a("WebRTC"),i(e)]),a(" 连接的流），那么这个值将返回 "),h,a("。")]),k])}const g=t(l,[["render",v],["__file","html5meitiyuansu.html.vue"]]);export{g as default};
