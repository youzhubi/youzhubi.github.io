import{_ as a,p as n,q as s,Z as t}from"./framework-9675d465.js";const p="/javascriptImages/renderTime.png",e="/javascriptImages/production.png",c="/javascriptImages/cssParse.png",o="/javascriptImages/jsParse.png",i="/javascriptImages/parseHtml.png",l="/javascriptImages/parsecss.png",r="/javascriptImages/domCssTree.png",u="/javascriptImages/recalculateStyle.png",d="/javascriptImages/layoutRes.png",k="/javascriptImages/Layout.png",m="/javascriptImages/Layout2.png",g="/javascriptImages/Layout3.png",v="/javascriptImages/layer.png",h="/javascriptImages/paint1.png",_="/javascriptImages/paint2.png",b="/javascriptImages/tiling1.png",f="/javascriptImages/tiling2.png",y="/javascriptImages/raster.png",S="/javascriptImages/raster2.png",j="/javascriptImages/draw.png",x="/javascriptImages/finally.png",w="/javascriptImages/reflow.png",I="/javascriptImages/repaint.png",M={},q=t('<p>袁进老师前端大师课笔记</p><h2 id="浏览器是如何渲染页面的" tabindex="-1"><a class="header-anchor" href="#浏览器是如何渲染页面的" aria-hidden="true">#</a> 浏览器是如何渲染页面的？</h2><p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。</p><p>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p><p><img src="'+p+'" alt=""></p><hr><p>整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画</p><p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p><p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p><p><img src="'+e+'" alt=""></p><hr><h3 id="_1-渲染的第一步是解析-html-parse-html" tabindex="-1"><a class="header-anchor" href="#_1-渲染的第一步是解析-html-parse-html" aria-hidden="true">#</a> 1.渲染的第一步是<code>解析 HTML （Parse HTML）</code></h3><p>解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。</p><p>如果主线程解析到<code>link</code>位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</p><p><img src="'+c+'" alt=""></p><p>如果主线程解析到<code>script</code>位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。</p><p><img src="'+o+'" alt=""></p><p>第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。</p><p><img src="'+i+'" alt=""></p><p><img src="'+l+'" alt=""></p><p><img src="'+r+'" alt=""></p><hr><h3 id="_2-渲染的下一步是样式计算-recalculate-style" tabindex="-1"><a class="header-anchor" href="#_2-渲染的下一步是样式计算-recalculate-style" aria-hidden="true">#</a> 2.渲染的下一步是<code>样式计算（Recalculate Style）</code></h3><p>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。</p><p>在这一过程中，很多预设值会变成绝对值，比如<code>red</code>会变成<code>rgb(255,0,0)</code>；相对单位会变成绝对单位，比如<code>em</code>会变成<code>px</code>。</p><p>这一步完成后，会得到一棵带有样式的 DOM 树。</p><p><img src="'+u+'" alt=""></p><hr><h3 id="_3-接下来是布局-布局-layout-完成后会得到布局树" tabindex="-1"><a class="header-anchor" href="#_3-接下来是布局-布局-layout-完成后会得到布局树" aria-hidden="true">#</a> 3.接下来是<strong>布局</strong>，<code>布局（Layout）</code>完成后会得到布局树</h3><p><img src="'+d+'" alt=""></p><p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。</p><p>大部分时候，DOM 树和布局树并非一一对应。</p><p>比如<code>display:none</code>的节点没有几何信息，因此不会生成到布局树.</p><p><img src="'+k+'" alt=""></p><p>又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。</p><p><img src="'+m+'" alt=""></p><p>还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。下图Layout的b应该再包括一个匿名行盒，因为内容必须在行盒中 行盒和块盒不能相邻。</p><p><img src="'+g+'" alt=""></p><hr><h3 id="_4-下一步是分层-layer" tabindex="-1"><a class="header-anchor" href="#_4-下一步是分层-layer" aria-hidden="true">#</a> 4.下一步是<code>分层（Layer）</code></h3><p>主线程会使用一套复杂的策略对整个布局树中进行分层。</p><p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。</p><p>滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过<code>will-change</code>属性更大程度的影响分层结果。</p><p><img src="'+v+'" alt=""></p><hr><h3 id="_5-再下一步是绘制-paint" tabindex="-1"><a class="header-anchor" href="#_5-再下一步是绘制-paint" aria-hidden="true">#</a> 5.再下一步是<code>绘制（Paint）</code></h3><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p><p><img src="'+h+'" alt=""></p><p><img src="'+_+'" alt=""></p><hr><h3 id="_6-分块-tiling" tabindex="-1"><a class="header-anchor" href="#_6-分块-tiling" aria-hidden="true">#</a> 6.<code>分块 （Tiling）</code></h3><p>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。</p><p>合成线程首先对每个图层进行分块，将其划分为更多的小区域。</p><p><img src="'+b+'" alt=""></p><p>它会从线程池中拿取多个线程来完成分块工作。</p><p><img src="'+f+'" alt=""></p><hr><h3 id="_7-分块完成后-进入光栅化-raster-阶段。" tabindex="-1"><a class="header-anchor" href="#_7-分块完成后-进入光栅化-raster-阶段。" aria-hidden="true">#</a> 7.分块完成后，进入<code>光栅化（Raster）</code>阶段。</h3><p>合成线程会将块信息交给 GPU 进程（不是在说显卡是浏览器进程），以极高的速度完成光栅化。</p><p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</p><p><img src="'+y+'" alt=""></p><p><img src="'+S+'" alt=""></p><p>光栅化的结果，就是一块一块的位图。</p><hr><h3 id="_8-最后一个阶段就是画-draw-了" tabindex="-1"><a class="header-anchor" href="#_8-最后一个阶段就是画-draw-了" aria-hidden="true">#</a> 8.最后一个阶段就是<code>画（Draw）</code>了</h3><p>合成线程拿到每个层、每个块的位图后，生成一个个<code>指引（quad）</code>信息。</p><p>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</p><p><strong>变形发生在合成线程</strong>，与渲染主线程无关，这就是<code>transform</code>效率高的本质原因。</p><p>合成线程会把 quad 提交给 GPU 进程，由 <strong>GPU 进程产生系统调用</strong>，提交给 GPU 硬件，完成最终的屏幕成像。</p><p><img src="'+j+'" alt=""></p><p><img src="'+x+'" alt=""></p><blockquote><p>渲染进程：放到一个沙盒里，与操作系统隔离，更加安全，即使有恶意病毒攻击渲染进程，也不会影响到本机。</p><ul><li>渲染主线程</li><li>合成线程</li></ul></blockquote><h2 id="什么是-reflow" tabindex="-1"><a class="header-anchor" href="#什么是-reflow" aria-hidden="true">#</a> 什么是 reflow？</h2><ul><li>reflow 的本质就是重新计算 layout 树。</li><li>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。</li><li>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，<strong>改动属性造成的 reflow 是异步完成的</strong>。</li><li>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。</li><li>浏览器在反复权衡下，最终决定获取属性立即 reflow。</li></ul><p><img src="'+w+'" alt=""></p><h2 id="什么是-repaint" tabindex="-1"><a class="header-anchor" href="#什么是-repaint" aria-hidden="true">#</a> 什么是 repaint？</h2><ul><li>repaint 的本质就是重新根据分层信息计算了绘制指令。</li><li>当改动了可见样式后，就需要重新计算，会引发 repaint。</li><li>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。</li></ul><p><img src="'+I+`" alt=""></p><h2 id="为什么-transform-的效率高" tabindex="-1"><a class="header-anchor" href="#为什么-transform-的效率高" aria-hidden="true">#</a> 为什么 transform 的效率高？</h2><p>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个<code>draw</code>阶段。</p><p>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p><p>下面这段代码能够很好的演示这个情况：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.ball</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> #f40<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.ball1</span> <span class="token punctuation">{</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> move1 1s alternate infinite ease-in-out<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.ball2</span> <span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> move2 1s alternate infinite ease-in-out<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token atrule"><span class="token rule">@keyframes</span> move1</span> <span class="token punctuation">{</span>
    <span class="token selector">to</span> <span class="token punctuation">{</span>
      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token atrule"><span class="token rule">@keyframes</span> move2</span> <span class="token punctuation">{</span>
    <span class="token selector">to</span> <span class="token punctuation">{</span>
      <span class="token property">left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>死循环<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ball ball1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ball ball2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,83),L=[q];function T(D,H){return n(),s("div",null,L)}const C=a(M,[["render",T],["__file","liulanqixuanranyuanli.html.vue"]]);export{C as default};
